{"version":3,"sources":["component/Flag.js","App.js","index.js"],"names":["Flag","flagData","updateFlagChoice","flipped","disable","className","src","alt","name","process","onClick","flagsPng","matchFound","App","useState","flags","setFlags","flagOne","setFlagOne","flagTwo","setFlagTwo","turn","setTurn","setDisable","flag","useEffect","prevFlags","map","prevFlag","setTimeout","turnComplete","prevTurn","allFlagsInPair","sort","Math","random","ele","key","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAEe,SAASA,EAAT,GAAgE,IAAhDC,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,iBAAkBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,QAMlE,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAASK,IAAKC,IAAKN,EAASO,OACxD,qBAAKF,IAAMG,4BAA0CF,IAAI,QAAQG,QATnD,WACdN,GACFF,EAAiBD,WCAvB,IAAMU,EAAW,CACf,CAAEL,IAAKG,yBAAwCD,KAAM,QAASI,YAAY,GAC1E,CAAEN,IAAKG,yBAAwCD,KAAM,UAAWI,YAAY,GAC5E,CAAEN,IAAKG,yBAAwCD,KAAM,UAAWI,YAAY,GAC5E,CAAEN,IAAKG,yBAAwCD,KAAM,QAASI,YAAY,GAC1E,CAAEN,IAAKG,yBAAwCD,KAAM,YAAaI,YAAY,GAC9E,CAAEN,IAAKG,yBAAwCD,KAAM,WAAYI,YAAY,IAoGhEC,MA7Ff,WACE,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAS,MAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,mBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA8BR,oBAAS,GAAvC,mBAAOV,EAAP,KAAgBmB,EAAhB,KAkBMrB,EAAmB,SAACsB,GAExBP,EAAUG,EAAWI,GAAQN,EAAWM,IAG1CC,qBAAU,WAwBRR,GAAWE,IArBTI,GAAW,GACPN,EAAQT,OAASW,EAAQX,MAE3BQ,GAAS,SAACU,GACR,OAAOA,EAAUC,KAAI,SAACC,GACpB,OAAIA,EAASpB,OAASS,EAAQT,MAAQoB,EAASpB,OAASW,EAAQX,KACvD,2BAAKoB,GAAZ,IAAsBhB,YAAY,IAE3BgB,QAQfC,YAAW,WACTC,MACC,QAIJ,CAACb,EAASE,IAGb,IAAMW,EAAe,WACnBP,GAAW,GACXL,EAAW,MACXE,EAAW,MACXE,GAAQ,SAAAS,GAAQ,OAAIA,EAAS,MAK/B,OACE,sBAAK1B,UAAU,MAAf,UACE,gCACE,+DACA,wBAAQK,QA9DU,WAEtB,IAAIsB,EAAc,UAAOrB,EAAaA,GAC9BqB,EAZqBC,MAAK,kBAAMC,KAAKC,SAAW,MAcxDH,EAAiBA,EAAeL,KAAI,SAACS,GAAD,mBAAC,eAChCA,GAD+B,IAElCC,IAAI,GAAD,OAAKH,KAAKI,MAAsB,IAAhBJ,KAAKC,gBAE1BjB,EAAW,MACXE,EAAW,MACXJ,EAASgB,GACTV,EAAQ,IAkDJ,+BAGF,qBAAKjB,UAAU,YAAf,SACGU,GACCA,EAAMY,KAAI,SAACS,GAAD,OACR,cAAC,EAAD,CACEnC,SAAUmC,EAEVlC,iBAAkBA,EAClBC,QAASiC,IAAMnB,GAAWmB,IAAMjB,GAAWiB,EAAIxB,WAC/CR,QAASA,GAHJgC,EAAIC,UASjB,8BACGhB,EAAM,+CAAkBA,KAAY,iECpG7CkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6268e9ed.chunk.js","sourcesContent":["import \"./Flag.css\";\r\n\r\nexport default function Flag({ flagData, updateFlagChoice, flipped, disable}) {\r\n  const handleClick = () => {\r\n    if(!disable){\r\n      updateFlagChoice(flagData)\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"flag\">\r\n      <div className={flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" src={flagData.src} alt={flagData.name}></img>\r\n        <img src= {process.env.PUBLIC_URL +\"/img/cover.png\"} alt=\"cover\" onClick={handleClick}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Flag from \"./component/Flag\";\n\n//hard coded the same dimension png of the maps\nconst flagsPng = [\n  { src: process.env.PUBLIC_URL + \"/img/cn.png\", name: \"China\", matchFound: false },\n  { src: process.env.PUBLIC_URL + \"/img/dz.png\", name: \"Algeria\", matchFound: false },\n  { src: process.env.PUBLIC_URL + \"/img/fi.png\", name: \"Finland\", matchFound: false },\n  { src: process.env.PUBLIC_URL + \"/img/in.png\", name: \"India\", matchFound: false },\n  { src: process.env.PUBLIC_URL + \"/img/sg.png\", name: \"Singapore\", matchFound: false },\n  { src: process.env.PUBLIC_URL + \"/img/za.png\", name: \"S Africa\", matchFound: false },\n];\n\n//a simple shuffle function got off from stackOverFlow\n// Math.random() - 0.5 is a random number that may be positive or negative, so the sorting function reorders elements randomly.\nconst shuffle = (array) => array.sort(() => Math.random() - 0.5);\n\nfunction App() {\n  const [flags, setFlags] = useState(null);\n  const [flagOne, setFlagOne] = useState(null);\n  const [flagTwo, setFlagTwo] = useState(null);\n  const [turn, setTurn] = useState(0)\n  const [disable, setDisable] = useState(false)\n\n  const shuffleTheFlags = () => {\n    //making two of each, so as to create pair, bc well we will match pair\n    let allFlagsInPair = [...flagsPng, ...flagsPng];\n    shuffle(allFlagsInPair);\n    //give key value as another object property\n    allFlagsInPair = allFlagsInPair.map((ele) => ({\n      ...ele,\n      key: `${Math.floor(Math.random() * 100000)}`,\n    }));\n    setFlagOne(null)\n    setFlagTwo(null)\n    setFlags(allFlagsInPair);\n    setTurn(0)\n  };\n\n  //handles clicking on the front cover\n  const updateFlagChoice = (flag) => {\n    //if flagOne is not null aka opened then then the new click is on the second flag\n    flagOne ? setFlagTwo(flag) : setFlagOne(flag);\n  };\n\n  useEffect(() => {\n    const compareChoices = () => {\n      //disable all flags while we process match \n      setDisable(true)\n      if (flagOne.name === flagTwo.name) {\n        //access previous state easily with prevState and map over the array\n        setFlags((prevFlags) => {\n          return prevFlags.map((prevFlag) => {\n            if (prevFlag.name === flagOne.name || prevFlag.name === flagTwo.name) {\n              return { ...prevFlag, matchFound: true };\n            } else {\n              return prevFlag;\n            }\n          });\n        });\n        //console.log(\"Match found\");\n      } else {\n        //console.log(\"Match not found\");\n      }\n      setTimeout(function(){\n        turnComplete();\n      }, 215);\n      \n    };\n    flagOne && flagTwo && compareChoices();\n  }, [flagOne, flagTwo]);\n\n  //reset upon one turn completion\n  const turnComplete = () => {\n    setDisable(false)\n    setFlagOne(null);\n    setFlagTwo(null);\n    setTurn(prevTurn => prevTurn+1)\n  };\n\n  //console.log(disable);\n  //console.log(flagOne, flagTwo);\n  return (\n    <div className=\"App\">\n      <div> \n        <h1>Click and find matching flags</h1>\n        <button onClick={shuffleTheFlags}>Start new game</button>\n      </div>\n  \n      <div className=\"flag-grid\">\n        {flags &&\n          flags.map((ele) => (\n            <Flag\n              flagData={ele}\n              key={ele.key}\n              updateFlagChoice={updateFlagChoice}\n              flipped={ele===flagOne || ele===flagTwo || ele.matchFound}\n              disable={disable}\n            >\n            </Flag>\n          ))}\n      </div>\n\n      <div>\n        {turn? <p>Turn counter: {turn}</p> : <p>Test your memory and luck!</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}